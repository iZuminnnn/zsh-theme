# C·∫•u h√¨nh l·ªãch s·ª≠
HISTFILE="${HOME}/.zsh_history"
HISTSIZE=1000
SAVEHIST=1000
setopt HIST_IGNORE_DUPS HIST_IGNORE_ALL_DUPS HIST_SAVE_NO_DUPS

# Danh s√°ch quotes v√† m√†u s·∫Øc
troll_quotes=(
	"ƒê√£ code g√¨ ch∆∞a hay v·∫´n copy-paste ng∆∞·ªùi ƒë·∫πp?"
	"ƒê√£ debug g√¨ ch∆∞a hay ƒë·ªï l·ªói cho intern ng∆∞·ªùi ƒë·∫πp?"
	"ƒê√£ commit g√¨ ch∆∞a hay ƒë·ªÉ git blame ng∆∞·ªùi ƒë·∫πp?"
	"ƒê√£ fix bug g√¨ ch∆∞a hay th√™m bug m·ªõi ng∆∞·ªùi ƒë·∫πp?"
	"ƒê√£ push g√¨ ch∆∞a hay s·ª£ CI fail ng∆∞·ªùi ƒë·∫πp?"
	"ƒê√£ pull request g√¨ ch∆∞a hay ch·ªù merge conflict ng∆∞·ªùi ƒë·∫πp?"
	"ƒê√£ refactor g√¨ ch∆∞a hay code nh∆∞ h·∫°ch ng∆∞·ªùi ƒë·∫πp?"
	"ƒê√£ unit test g√¨ ch∆∞a hay c·∫ßu tr·ªùi ch·∫°y ng∆∞·ªùi ƒë·∫πp?"
	"ƒê√£ deploy g√¨ ch∆∞a hay server crash ng∆∞·ªùi ƒë·∫πp?"
	"ƒê√£ Stack Overflow g√¨ ch∆∞a hay t·ª± nghƒ© ng∆∞·ªùi ƒë·∫πp?"
	"ƒê√£ comment code g√¨ ch∆∞a hay ƒë·ªÉ ng∆∞·ªùi ta ƒëo√°n ng∆∞·ªùi ƒë·∫πp?"
	"ƒê√£ h·ªçp team g√¨ ch∆∞a hay ng·ªß g·∫≠t ng∆∞·ªùi ƒë·∫πp?"
	"ƒê√£ deadline g√¨ ch∆∞a hay v·∫´n n∆∞·ªõc ƒë·∫øn ch√¢n ng∆∞·ªùi ƒë·∫πp?"
	"ƒê√£ clean code g√¨ ch∆∞a hay to√†n spaghetti ng∆∞·ªùi ƒë·∫πp?"
	"ƒê√£ h·ªçc framework g√¨ ch∆∞a hay v·∫´n console.log ng∆∞·ªùi ƒë·∫πp?"
	"ƒê√£ h·ªèi ChatGPT g√¨ ch∆∞a hay t·ª± code ng∆∞·ªùi ƒë·∫πp?"
	"ƒê√£ fix l·ªói 404 g√¨ ch∆∞a hay ƒë·ªÉ 500 ng∆∞·ªùi ƒë·∫πp?"
	"ƒê√£ overtime g√¨ ch∆∞a hay 5h v·ªÅ ng∆∞·ªùi ƒë·∫πp?"
	"ƒê√£ code review g√¨ ch∆∞a hay to√†n LGTM ng∆∞·ªùi ƒë·∫πp?"
	"ƒê√£ production g√¨ ch∆∞a hay v·∫´n localhost ng∆∞·ªùi ƒë·∫πp?"
)
troll_colors=(91 92 93 94 95 96)

# T·ªëi ∆∞u troll theo th·ªùi gian
troll_by_time() {
    local hour=$(date +%H)
    local random_color=${troll_colors[RANDOM % ${#troll_colors[@]}]}
    local message
    case $hour in
        0[0-5]) message="ƒê√£ code g√¨ ch∆∞a hay m·∫Øt c√≤n cay gi·ªù n√†y ng∆∞·ªùi ƒë·∫πp?" ;;
        0[6-9]|1[0-1]) message="ƒê√£ c√† ph√™ g√¨ ch∆∞a hay v·∫´n g√† g·∫≠t ng∆∞·ªùi ƒë·∫πp?" ;;
        1[2-7]) message="ƒê√£ deadline g√¨ ch∆∞a hay v·∫´n chill ng∆∞·ªùi ƒë·∫πp?" ;;
        *) message="ƒê√£ ng·ªß g√¨ ch∆∞a hay √¥m bug khuya ng∆∞·ªùi ƒë·∫πp?" ;;
    esac
    echo "\e[${random_color}m${message}\e[0m"
}

# T·ªëi ∆∞u CPU troll
cpu_troll() {
    local cpu_usage num_cores
    case "$OSTYPE" in
        darwin*)
            cpu_usage=$(ps -A -o %cpu | awk 'NR>1{s+=$1} END{print int(s)}')
            num_cores=$(sysctl -n hw.ncpu)
            ;;
        linux-gnu*)
            cpu_usage=$(ps aux | awk '{s+=$3} END{print int(s)}')
            num_cores=$(nproc 2>/dev/null || echo 1)
            ;;
        msys*|cygwin*)
            cpu_usage=$(wmic cpu get LoadPercentage | awk 'NR==2{print $1}' 2>/dev/null || powershell -command "(Get-Counter '\Processor(_Total)\% Processor Time').CounterSamples.CookedValue" 2>/dev/null)
            num_cores=$(wmic cpu get NumberOfCores | awk 'NR==2{print $1}' 2>/dev/null || powershell -command "(Get-WmiObject Win32_ComputerSystem).NumberOfLogicalProcessors" 2>/dev/null)
            ;;
        *) return ;;
    esac
    
    [[ -z "$cpu_usage" || -z "$num_cores" ]] && cpu_usage=0
    [[ "$OSTYPE" != "msys" && "$OSTYPE" != "cygwin" ]] && cpu_usage=$((cpu_usage / num_cores))
    
    if ((cpu_usage > 70)); then
        local troll_cpu=(
            "M√°y n√≥ng th·∫ø, code g√¨ m√† cƒÉng v·∫≠y ng∆∞·ªùi ƒë·∫πp?"
            "CPU ƒë·ªè r·ªìi, ngh·ªâ tay ƒëi ng∆∞·ªùi ƒë·∫πp!"
            "Code ki·ªÉu g√¨ m√† m√°y mu·ªën n·ªï v·∫≠y ng∆∞·ªùi ƒë·∫πp?"
            "70% CPU, ch·∫Øc ƒë√†o coin ch·ª© code g√¨ n·ªïi ng∆∞·ªùi ƒë·∫πp?"
        )
        echo -e "\e[92m${troll_cpu[RANDOM % ${#troll_cpu[@]}]}\e[0m"
    fi
}

# T·ªëi ∆∞u troll command
troll_cmd() {
    local cmd="$1" message color
    case "$cmd" in
        *git\ commit*) message="ƒê√£ commit g√¨ ch∆∞a hay ƒë·ªÉ qu√™n -m ng∆∞·ªùi ƒë·∫πp?" color=93 ;;
        *git\ push*) message="ƒê√£ push th·∫≠t ch∆∞a hay m·∫°ng lag ng∆∞·ªùi ƒë·∫πp?" color=94 ;;
        *git\ st*|*git\ status*) message="Status check ho√†i, code ƒë√¢u m√† xem ng∆∞·ªùi ƒë·∫πp?" color=92 ;;
        *python*) message="ƒê√£ debug Python ch∆∞a hay print m√£i ng∆∞·ªùi ƒë·∫πp?" color=95 ;;
        *npm*) message="ƒê√£ node_modules g√¨ ch∆∞a hay ƒë∆° m√°y ng∆∞·ªùi ƒë·∫πp?" color=91 ;;
        *rm*) message="ƒê√£ x√≥a g√¨ ch∆∞a hay l·ª° tay x√≥a lu√¥n code ng∆∞·ªùi ƒë·∫πp?" color=96 ;;
        *) return ;;
    esac
    echo "\e[${color}m${message}\e[0m"
}

# C√°c h√†m th√¥ng tin
venv_info() { [[ -n $VIRTUAL_ENV ]] && echo "\e[93müêç ($(basename $VIRTUAL_ENV))\e[0m"; }
git_info() {
    git rev-parse --is-inside-work-tree &>/dev/null || return
    local branch=$(git symbolic-ref --short HEAD 2>/dev/null || git describe --tags --always)
    [[ -n $(git status --porcelain 2>/dev/null) ]] && echo "\e[91müåü(${branch}*)\e[0m" || echo "\e[92müåø(${branch})\e[0m"
}
time_icon() {
    case $(date +%H) in
        0[0-5]) echo "üåå" ;; 0[6-9]|1[0-1]) echo "üåû" ;;
        1[2-7]) echo "üå§Ô∏è" ;; *) echo "üåô" ;;
    esac
}

# T·ªëi ∆∞u weather
typeset -g last_weather_update=0 cached_weather_icon="üåç ?¬∞C"
weather_icon() {
    local current_time=$(date +%s)
    if ((current_time - last_weather_update >= 300)); then
		local weather_data=$(curl -s "wttr.in?format=%C+%t&location=hanoi&lang=en" 2>/dev/null || echo "unknown+?¬∞C")
		local weather=$(echo "$weather_data" | cut -d' ' -f1)
		local temp=$(echo "$weather_data" | cut -d'+' -f2)
        cached_weather_icon=$(
            case "$weather" in
				"Sunny") echo "\e[93m‚òÄÔ∏è N·∫Øng ƒë·∫πp, ra ngo√†i h√≠t drama ƒëi! ${temp}\e[0m" ;;
				"Clear") echo "\e[33müåû Tr·ªùi trong, t√¢m h·ªìn c≈©ng n√™n th·∫ø! ${temp}\e[0m" ;;
				"Partly cloudy") echo "\e[37m‚õÖ Tr·ªùi n·ª≠a n·∫Øng n·ª≠a m∆° m√†ng! ${temp}\e[0m" ;;
				"Cloudy") echo "\e[90m‚òÅÔ∏è Tr·ªùi √¢m u nh∆∞ deadline g·∫ßn k·ªÅ! ${temp}\e[0m" ;;
				"Overcast") echo "\e[90müå•Ô∏è U √°m qu√°, pha tr√† ng·ªìi chill ƒëi! ${temp}\e[0m" ;;
				"Mist"|"Fog") echo "\e[37müå´Ô∏è S∆∞∆°ng m√π, c·∫©n th·∫≠n l·∫°c l·ªëi! ${temp}\e[0m" ;;
				"Light rain"|"Drizzle") echo "\e[94müå¶Ô∏è M∆∞a l·∫•t ph·∫•t, l√£ng m·∫°n gh√™! ${temp}\e[0m" ;;
				"Rain"|"Shower"|"Moderate rain") echo "\e[94müåßÔ∏è M∆∞a r·ªìi, ·ªü nh√† code th√¥i! ${temp}\e[0m" ;;
				"Heavy rain"|"Heavy shower") echo "\e[34m‚õàÔ∏è M∆∞a to, tr√πm chƒÉn ng·ªß ti·∫øp! ${temp}\e[0m" ;;
				"Thunderstorm"|"Thundery") echo "\e[34müå©Ô∏è S·∫•m ch·ªõp, ƒë·ª´ng ra ngo√†i nh√©! ${temp}\e[0m" ;;
				"Snow") echo "\e[97m‚ùÑÔ∏è Tuy·∫øt r∆°i, m∆° v·ªÅ ƒê√† L·∫°t √†? ${temp}\e[0m" ;;
				"Light snow"|"Snow shower") echo "\e[97müå®Ô∏è Tuy·∫øt nh·∫π, l·∫°nh m√† vui! ${temp}\e[0m" ;;
				"Hail") echo "\e[96müåßÔ∏è‚ùÑÔ∏è M∆∞a ƒë√°, tr·ªën trong nh√† th√¥i! ${temp}\e[0m" ;;
				"Sleet") echo "\e[96müåßÔ∏èüå®Ô∏è M∆∞a tuy·∫øt, th·ªùi ti·∫øt k·ª≥ l·∫° th·∫≠t! ${temp}\e[0m" ;;
				*) echo "\e[32müåç Tr·ªùi g√¨ m√† l·∫° th·∫ø kh√¥ng bi·∫øt! ${temp}\e[0m" ;;
            esac
        )
        last_weather_update=$current_time
    fi
    echo -e "$cached_weather_icon"
}

# Prompt hooks
preexec() { timer=$(( $(date +%s%0N) / 1000000 )); last_cmd="$1"; }
precmd() {
    local last_exit_code=$?
    [[ $last_exit_code -eq 0 && -n $last_cmd ]] && troll_cmd "$last_cmd"
    
    PS1="$(time_icon) %F{cyan}%n@%m %F{magenta}%~%f $(venv_info) $(git_info)
%F{green}‚ûú %f"
    
    if [[ -n $timer ]]; then
        local now=$(( $(date +%s%0N) / 1000000 ))
        RPROMPT="%F{cyan}$((now-timer))ms%f"
        unset timer
    fi
    cpu_troll
    unset last_cmd
}

# Clear custom
my_clear() {
    command clear
	echo -e "\e[${troll_colors[RANDOM % ${#troll_colors[@]}]}m${troll_quotes[RANDOM % ${#troll_quotes[@]}]}\e[0m"
    echo "Th·ªùi ti·∫øt h√¥m nay: $(weather_icon)"
}

# C·∫•u h√¨nh cu·ªëi
autoload -U colors && colors
alias clear="my_clear"
source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh 2>/dev/null

# Kh·ªüi t·∫°o
echo -e "\e[${troll_colors[RANDOM % ${#troll_colors[@]}]}m${troll_quotes[RANDOM % ${#troll_quotes[@]}]}\e[0m"
echo "Th·ªùi ti·∫øt h√¥m nay: $(weather_icon)"
